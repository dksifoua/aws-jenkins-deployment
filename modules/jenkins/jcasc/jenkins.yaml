jenkins:
  systemMessage: |
    <h1  style="background-color: #35824E; color: white; text-align: center;">
    Jenkins Automation Server  for Continuous Integration & Continuous Deployment
    </h1>
    <p style="text-align: center;">
    This Jenkins is 100% configured and managed <b>as code</b>.<br />
    Configuration is now mostly handled by the <b>Jenkins Configuration as Code (JCasC)</b> plugin.<br />
    JCasC config can be found in the <code>jenkins.yaml</code> file in the <code>/var/jenkins_home</code> folder.
    </p>
  markupFormatter:
    rawHtml:
      disableSyntaxHighlighting: true
  numExecutors: 2

  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: ${JENKINS_ADMIN_USER}
          name: ${JENKINS_ADMIN_NAME}
          description: ${JENKINS_ADMIN_DESC}
          password: ${JENKINS_ADMIN_PASS}
          properties:
            - timezone:
                timeZoneName: America/Toronto

  authorizationStrategy:
    globalMatrix:
      entries:
        - user:
            name: ${JENKINS_ADMIN_USER}
            permissions:
              - Overall/Administer
        - group:
            name: authenticated
            permissions:
              - Overall/Read
        - user:
            name: anonymous
            permissions:
              - Overall/Read

credentials:
  system:
    domainCredentials:
      - credentials:
          - string:
              description: GitHub Personal Access Token
              id: github
              scope: GLOBAL
              secret: ${GITHUB_ACCESS_TOKEN}

appearance:
  locale:
    systemLocale: en
    ignoreAcceptLanguage: true

unclassified:
  githubpluginconfig:
    configs:
      - name: Default
        apiUrl: https://api.github.com
        credentialsId: github
        manageHooks: true

  githubconfiguration:
    apiRateLimitChecker: NoThrottle

jobs:
  - script: >
      organizationFolder('GitHub Org - dksifoua') {
        description('This contains all repositories with a Jenkinsfile from my github account')
        displayName('GitHub Organization Folder - dksifoua')
      
        organizations {
          github {
            repoOwner('dksifoua')
            apiUri('https://api.github.com')
            credentialsId('github')
            enableAvatar(true)
            
            traits {
              gitBranchDiscovery()
              gitHubExcludeArchivedRepositories()
              gitHubExcludeForkedRepositories()
              gitHubIgnoreDraftPullRequestFilter()
              gitHubTagDiscovery()
              pruneStaleBranch()
              pruneStaleTag()
              wipeWorkspaceTrait()
              
              gitHubBranchDiscovery {
                strategyId(3) // All branches
              }
              gitHubPullRequestDiscovery {
                strategyId(2) // The Current Pull Request Revision
              }
              multiBranchProjectDisplayNaming {
                displayNamingStrategy('RAW_AND_OBJECT_DISPLAY_NAME')
              }
              /*userIdentity {
                extension {
                // If given, "GIT_COMMITTER_NAME=[this]" and "GIT_AUTHOR_NAME=[this]" are set for builds.
                name(String value)
                // If given, "GIT_COMMITTER_EMAIL=[this]" and "GIT_AUTHOR_EMAIL=[this]" are set for builds.
                email(String value)
                }
              }*/
            }
          }
        }
        
        orphanedItemStrategy {
          discardOldItems {
            daysToKeep(7)
            numToKeep(20)
          }
        }
        
        projectFactories {
          workflowMultiBranchProjectFactory {
            scriptPath('Jenkinsfile')
          }
        }
      
        triggers {
          cron('@daily')
        }
      }