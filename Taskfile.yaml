version: '3'

dotenv:
  - ".env"

vars:
  BUILDER:
    sh: |
      if [ $ENV == "local" ]; then
        echo "desktop-linux"
      else
        echo "cloud-dksifoua-builder"
      fi
  DOCKER_FILE: modules/jenkins/docker/Dockerfile
  JCASC_FILE: modules/jenkins/jcasc/jenkins.yaml
  PLUGINS_FILE: modules/jenkins/jcasc/plugins.txt
  REPOSITORY:
    sh: grep 'LABEL repository=' {{.DOCKER_FILE}} | cut -d '"' -f 2
  VERSION:
    sh: grep 'LABEL version=' {{.DOCKER_FILE}} | cut -d '"' -f 2

tasks:
  build:
    desc: "Build Jenkins image"
    cmd: |
      docker build \
        --build-arg JCASC_FILE="{{.JCASC_FILE}}" \
        --build-arg PLUGINS_FILE="{{.PLUGINS_FILE}}" \
        --build-arg JENKINS_ADMIN_USER="$JENKINS_ADMIN_USER" \
        --build-arg JENKINS_ADMIN_NAME="$JENKINS_ADMIN_NAME" \
        --build-arg JENKINS_ADMIN_DESC="$JENKINS_ADMIN_DESC" \
        --build-arg JENKINS_ADMIN_PASS="$JENKINS_ADMIN_PASS" \
        --build-arg JENKINS_ADMIN_EMAIL="$JENKINS_ADMIN_EMAIL" \
        --build-arg GITHUB_USER="$GITHUB_USER" \
        --build-arg GITHUB_ACCESS_TOKEN="$GITHUB_ACCESS_TOKEN" \
        --builder {{.BUILDER}} \
        --file {{.DOCKER_FILE}} \
        --tag {{.REPOSITORY}}/jenkins:{{.VERSION}} \
        .
    silent: true
    # --no-cache \

  run:
    desc: "Run local Jenkins container"
    cmd: |
      docker run \
        --detach \
        --name jenkins \
        --publish 8080:8080 \
        {{.REPOSITORY}}/jenkins:{{.VERSION}}
    silent: true

  tag:
    desc: "Tag Jenkins image"
    cmd: docker tag {{.REPOSITORY}}/jenkins:{{.VERSION}} {{.REPOSITORY}}/jenkins:latest
    silent: true

  push:
    desc: "Push Jenkins image to DockerHub"
    cmds:
      - docker push {{.REPOSITORY}}/jenkins:{{.VERSION}}
      - docker push {{.REPOSITORY}}/jenkins:latest
    silent: true

  tf-init:
    desc: "Initialize Terraform working directory"
    cmd: terraform init -upgrade
    silent: true

  tf-validate:
    desc: "Validate the Terraform configuration"
    cmd: terraform validate
    silent: true

  tf-fmt:
    desc: "Format Terraform configuration files"
    cmd: terraform fmt -recursive
    silent: true

  tf-plan:
    desc: "Create execution plan from the Terraform configuration"
    cmd: terraform plan -out=plan.out
    silent: true

  tf-apply:
    desc: "Apply Terraform configuration"
    cmds:
      - defer: rm plan.out
      - task: tf-plan
      - terraform apply plan.out
    silent: true

  tf-destroy:
    desc: "Destroy Terraform configuration"
    cmd: terraform destroy -auto-approve
    silent: true